name: Deploy API Staging

on:
  push:
    paths:
      - 'services/main/**'
    branches:
      - main

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      db: ${{ steps.filter.outputs.db }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            db:
              - 'services/main/init/**'

  sync-db:
    name: üóÑÔ∏è Synchronize Database
    runs-on: ubuntu-latest
    concurrency: db-sync-group
    needs: changes
    if: ${{ needs.changes.outputs.db == 'true' }}
    defaults:
      run:
        working-directory: services/main
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: services/main/go.mod
          cache: true
      - run: go mod download
      - name: üóÑÔ∏è Run database sync
        env:
          DB_HOST: ${{ secrets.STAGING_DB_HOST }}
          DB_USER: ${{ secrets.STAGING_DB_USER }}
          DB_PASS: ${{ secrets.STAGING_DB_PASS }}
          DB_NAME: ${{ secrets.STAGING_DB_NAME }}
          DB_DEFAULT_DBNAME: ${{ secrets.STAGING_DB_DEFAULT_DBNAME }}
          DB_PORT: ${{ secrets.STAGING_DB_PORT }}
          DB_SSLMODE: ${{ secrets.STAGING_DB_SSLMODE }}
        run: make update-db

  deploy:
    name: ‚öôÔ∏è Build And Deploy Staging
    runs-on: ubuntu-latest
    concurrency: deploy-group
    needs: [changes, sync-db]
    if: ${{ always() && (needs.changes.result == 'success') }}
    defaults:
      run:
        working-directory: services/main
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: üöÄ Deploy Staging
        run: flyctl deploy --config fly.staging.toml --remote-only --build-arg COMMIT_SHA=${{ github.sha }}
